
variables:
  env:
    value: ""
    description: "Enter the environment name: devopssit,sit,qa,uat,preprod"
  aws_resources:
    value: ""
    description: "Enter the aws resource name: EKS,EC2,RDS,ROUTE53,S3,ELB,SG,CLOUDWATCH,EFS,WAF,IAM"
stages:
    - Audit
    - Convert
    #- Notify

workflow:
  rules:
    - if: $env == "devopssit"
      variables:
        RUNNER_TAG: "dd-server-itda-devopssit-ue1"
    
    - if: $env == "sit"
      variables:
        RUNNER_TAG: "dd-server-itda-sit-ue1"


Job - Prepare the Audit report for AWS resources:
  stage: Audit
  script:
    - | 
      set +x    
      cd ${CI_PROJECT_DIR}/
      mkdir -p ./artifacts/
      echo "$aws_resources"
      find . -type f -name "*.*" -exec chmod u=rwx {} \;
      IFS=',' read -ra resources <<< "$aws_resources"
      for resource in "${resources[@]}"; do
          if [[ "${resource^^}" == "EC2" ]]; then
            echo "Executing operation $resource in ${env^^} environment"
            python3 ./scripts/ec2.py "$env"
          elif [[ "${resource^^}" == "EKS" ]]; then
            echo "Executing operation $resource in ${env^^} environment"
            python3 ./scripts/EKS_Audit.py "$env"
          elif [[ "${resource^^}" == "S3" ]]; then
            echo "Executing operation $resource in ${env^^} environment"
            python3 ./scripts/S3.py "$env"
          elif [[ "${resource^^}" == "RDS" ]]; then
            echo "Executing operation $resource in ${env^^} environment"
            python3 ./scripts/rds.py "$env"
          elif [[ "${resource^^}" == "ELB" ]]; then
            echo "Executing operation $resource in ${env^^} environment"
            python3 ./scripts/LB_Audit.py "$env"
          elif [[ "${resource^^}" == "ROUTE53" ]]; then
            echo "Executing operation $resource in ${env^^} environment"
            python3 ./scripts/route53_audit.py "$env"
          elif [[ "${resource^^}" == "SG" ]]; then
            echo "Executing operation $resource in ${env^^} environment"
            python3 ./scripts/sg-audit.py "$env" 
          elif [[ "${resource^^}" == "IAM" ]]; then
            echo "Executing operation $resource in ${env^^} environment"
            python3 ./scripts/iam-audit.py "$env" 
          elif [[ "${resource^^}" == "CLOUDWATCH" ]]; then
            echo "Executing operation $resource in ${env^^} environment"
            python3 ./scripts/cloudwatch-audit.py "$env"
          elif [[ "${resource^^}" == "WAF" ]]; then
            echo "Executing operation $resource in ${env^^} environment"
            python3 ./scripts/waf.py "$env"
          elif [[ "${resource^^}" == "EFS" ]]; then
            echo "Executing operation $resource in ${env^^} environment"
            python3 ./scripts/efs.py "$env"     
          else
            echo "Input variable \"resource\" does not have one of the expected values: EKS/EC2/RDS/ROUTE53/S3/ELB/SG/CLOUDWATCH/EFS/WAF/IAM"
          exit 1
          fi
      done
  when: manual
  allow_failure: false
  only:
    variables:
      - ($env != "" && ( $resource != ""))
  artifacts:
    paths:
      - ./artifacts/*.csv
    expire_in: 1 day
  tags: 
   - $RUNNER_TAG


    
    
Job - Convert CSV to Excel:
  stage: Convert
  script:
    - | 
      python3 convert_to_excel_local.py "$env"
      echo "Executing operation $resource in ${env_name} environment"
  dependencies:
    - Job - Prepare the Audit report for AWS resources
  when: manual
  allow_failure: false
  artifacts:
    paths:
      - ./final-artifact/*.xlsx
    expire_in: 1 day
  tags: 
   - $RUNNER_TAG


here, now we r able to trigger for single environment at once.required to update pipeline like it should work for multiple environments with comma seperated values while running the pipeline. and should create seperate excel workbook for each environment.please update code accordingly.


